apiVersion: v1
kind: ConfigMap
metadata:
  name: alertmanager-config
  namespace: monitoring
  labels:
    app: alertmanager
    component: monitoring
data:
  alertmanager.yml:
    global:
      resolve_timeout: 5m
      slack_api_url: ${SLACK_WEBHOOK_URL}
      smtp_smarthost: smtp.myelixir.com:587
      smtp_from: alerts@myelixir.com
      smtp_auth_username: ${SMTP_USERNAME}
      smtp_auth_password: ${SMTP_PASSWORD}

    route:
      group_by: ['alertname', 'cluster', 'service', 'severity']
      group_wait: 30s
      group_interval: 5m
      repeat_interval: 4h
      receiver: default
      routes:
        - match:
            severity: critical
          receiver: critical-alerts
          repeat_interval: 1h
          continue: true
        - match:
            severity: warning
          receiver: warning-alerts
          repeat_interval: 2h

    receivers:
      - name: default
        email_configs:
          - to: monitoring@myelixir.com
            send_resolved: true

      - name: critical-alerts
        slack_configs:
          - channel: '#critical-alerts'
            send_resolved: true
            title: '{{ .GroupLabels.alertname }}'
            text: '{{ .CommonAnnotations.description }}'
        email_configs:
          - to: oncall@myelixir.com
            send_resolved: true
            headers:
              subject: '[CRITICAL] {{ .GroupLabels.alertname }}'
        pagerduty_configs:
          - service_key: ${PAGERDUTY_KEY}
            send_resolved: true

      - name: warning-alerts
        slack_configs:
          - channel: '#warnings'
            send_resolved: true
            title: '{{ .GroupLabels.alertname }}'
            text: '{{ .CommonAnnotations.description }}'

    inhibit_rules:
      - source_match:
          severity: critical
        target_match:
          severity: warning
        equal: ['alertname', 'cluster', 'service']

---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: alertmanager
  namespace: monitoring
  labels:
    app: alertmanager
    component: monitoring
spec:
  replicas: 2
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
  selector:
    matchLabels:
      app: alertmanager
  template:
    metadata:
      labels:
        app: alertmanager
      annotations:
        checksum/config: ${CONFIG_CHECKSUM}
    spec:
      securityContext:
        runAsNonRoot: true
        runAsUser: 65534
      containers:
        - name: alertmanager
          image: prom/alertmanager:v0.25.0
          args:
            - --config.file=/etc/alertmanager/alertmanager.yml
            - --storage.path=/alertmanager
            - --web.external-url=http://alertmanager.monitoring.svc:9093
            - --cluster.advertise-address=$(POD_IP):9094
            - --cluster.listen-address=0.0.0.0:9094
          env:
            - name: POD_IP
              valueFrom:
                fieldRef:
                  fieldPath: status.podIP
          ports:
            - name: web
              containerPort: 9093
            - name: mesh
              containerPort: 9094
          livenessProbe:
            httpGet:
              path: /-/healthy
              port: 9093
            initialDelaySeconds: 30
            timeoutSeconds: 5
          readinessProbe:
            httpGet:
              path: /-/ready
              port: 9093
            initialDelaySeconds: 15
            timeoutSeconds: 5
          resources:
            requests:
              cpu: 100m
              memory: 256Mi
            limits:
              cpu: 200m
              memory: 512Mi
          volumeMounts:
            - name: alertmanager-config
              mountPath: /etc/alertmanager
            - name: alertmanager-storage
              mountPath: /alertmanager
      volumes:
        - name: alertmanager-config
          configMap:
            name: alertmanager-config
        - name: alertmanager-storage
          persistentVolumeClaim:
            claimName: alertmanager-storage

---
apiVersion: v1
kind: Service
metadata:
  name: alertmanager
  namespace: monitoring
  labels:
    app: alertmanager
    component: monitoring
  annotations:
    prometheus.io/scrape: 'true'
    prometheus.io/port: '9093'
spec:
  type: ClusterIP
  selector:
    app: alertmanager
  ports:
    - name: web
      port: 9093
      targetPort: 9093
    - name: mesh
      port: 9094
      targetPort: 9094

---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: alertmanager-storage
  namespace: monitoring
  labels:
    app: alertmanager
    component: monitoring
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: managed-premium