apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-datasources
  namespace: monitoring
data:
  prometheus.yaml: |
    apiVersion: 1
    datasources:
      - name: Prometheus
        type: prometheus
        url: http://prometheus:9090
        access: proxy
        isDefault: true
        jsonData:
          timeInterval: "30s"
          queryTimeout: "60s"
          httpMethod: "POST"
---
apiVersion: v1
kind: ConfigMap
metadata:
  name: grafana-dashboards
  namespace: monitoring
data:
  dashboards.yaml: |
    apiVersion: 1
    providers:
      - name: MyElixir
        folder: MyElixir
        type: file
        options:
          path: /var/lib/grafana/dashboards
        allowUiUpdates: false
  system-metrics.json: |
    {
      "title": "System Metrics",
      "panels": [
        {
          "title": "API Latency",
          "type": "graph",
          "datasource": "Prometheus",
          "targets": [
            {
              "expr": "http_request_duration_seconds{service=~\"api-.*\"}"
            }
          ]
        },
        {
          "title": "Database Queries",
          "type": "graph",
          "datasource": "Prometheus",
          "targets": [
            {
              "expr": "database_query_duration_seconds"
            }
          ]
        },
        {
          "title": "Blockchain Transactions",
          "type": "graph",
          "datasource": "Prometheus",
          "targets": [
            {
              "expr": "blockchain_transaction_duration_seconds"
            }
          ]
        }
      ],
      "refresh": "1m",
      "time": {
        "from": "now-6h",
        "to": "now"
      }
    }
  health-metrics.json: |
    {
      "title": "Health Metrics",
      "panels": [
        {
          "title": "Pod Health",
          "type": "stat",
          "datasource": "Prometheus",
          "targets": [
            {
              "expr": "kube_pod_container_status_restarts_total"
            }
          ]
        },
        {
          "title": "Memory Usage",
          "type": "gauge",
          "datasource": "Prometheus",
          "targets": [
            {
              "expr": "container_memory_usage_bytes / container_memory_limit_bytes * 100"
            }
          ]
        },
        {
          "title": "CPU Usage",
          "type": "gauge",
          "datasource": "Prometheus",
          "targets": [
            {
              "expr": "container_cpu_usage_seconds_total"
            }
          ]
        }
      ],
      "refresh": "30s",
      "time": {
        "from": "now-3h",
        "to": "now"
      }
    }
  business-metrics.json: |
    {
      "title": "Business Metrics",
      "panels": [
        {
          "title": "Transaction Volume",
          "type": "graph",
          "datasource": "Prometheus",
          "targets": [
            {
              "expr": "sum(rate(transaction_total[5m]))"
            }
          ]
        },
        {
          "title": "Active Users",
          "type": "stat",
          "datasource": "Prometheus",
          "targets": [
            {
              "expr": "sum(active_users_total)"
            }
          ]
        },
        {
          "title": "Success Rate",
          "type": "gauge",
          "datasource": "Prometheus",
          "targets": [
            {
              "expr": "sum(rate(successful_transactions_total[5m])) / sum(rate(transaction_total[5m])) * 100"
            }
          ]
        }
      ],
      "refresh": "5m",
      "time": {
        "from": "now-24h",
        "to": "now"
      }
    }
---
apiVersion: apps/v1
kind: Deployment
metadata:
  name: grafana
  namespace: monitoring
  labels:
    app: grafana
    component: monitoring
spec:
  replicas: 1
  selector:
    matchLabels:
      app: grafana
  template:
    metadata:
      labels:
        app: grafana
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "3000"
    spec:
      securityContext:
        fsGroup: 472
        runAsUser: 472
      containers:
        - name: grafana
          image: grafana/grafana:9.5.3
          ports:
            - name: http
              containerPort: 3000
              protocol: TCP
          env:
            - name: GF_SECURITY_ADMIN_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: grafana-secrets
                  key: admin-password
            - name: GF_AUTH_ANONYMOUS_ENABLED
              value: "false"
            - name: GF_AUTH_BASIC_ENABLED
              value: "false"
            - name: GF_AUTH_DISABLE_LOGIN_FORM
              value: "true"
            - name: GF_AUTH_AZURE_AD_ENABLED
              value: "true"
          volumeMounts:
            - name: grafana-storage
              mountPath: /var/lib/grafana
            - name: grafana-datasources
              mountPath: /etc/grafana/provisioning/datasources
            - name: grafana-dashboards
              mountPath: /etc/grafana/provisioning/dashboards
          resources:
            requests:
              cpu: "200m"
              memory: "512Mi"
            limits:
              cpu: "500m"
              memory: "1Gi"
          livenessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 60
            timeoutSeconds: 30
            failureThreshold: 10
          readinessProbe:
            httpGet:
              path: /api/health
              port: 3000
            initialDelaySeconds: 30
            timeoutSeconds: 30
            failureThreshold: 10
      volumes:
        - name: grafana-storage
          persistentVolumeClaim:
            claimName: grafana-storage
        - name: grafana-datasources
          configMap:
            name: grafana-datasources
        - name: grafana-dashboards
          configMap:
            name: grafana-dashboards
---
apiVersion: v1
kind: Service
metadata:
  name: grafana
  namespace: monitoring
  annotations:
    prometheus.io/scrape: "true"
    prometheus.io/port: "3000"
  labels:
    app: grafana
    component: monitoring
spec:
  selector:
    app: grafana
  ports:
    - name: http
      port: 3000
      targetPort: 3000
      protocol: TCP
  type: ClusterIP
---
apiVersion: v1
kind: PersistentVolumeClaim
metadata:
  name: grafana-storage
  namespace: monitoring
  labels:
    app: grafana
spec:
  accessModes:
    - ReadWriteOnce
  resources:
    requests:
      storage: 10Gi
  storageClassName: managed-premium